# ÁªôÂÆö‰∏Ä‰∏™‰∫åÂèâÊ†ëÔºåÊâæÂá∫ÂÖ∂ÊúÄÂ§ßÊ∑±Â∫¶„ÄÇ 
# 
#  ‰∫åÂèâÊ†ëÁöÑÊ∑±Â∫¶‰∏∫Ê†πËäÇÁÇπÂà∞ÊúÄËøúÂè∂Â≠êËäÇÁÇπÁöÑÊúÄÈïøË∑ØÂæÑ‰∏äÁöÑËäÇÁÇπÊï∞„ÄÇ 
# 
#  ËØ¥Êòé: Âè∂Â≠êËäÇÁÇπÊòØÊåáÊ≤°ÊúâÂ≠êËäÇÁÇπÁöÑËäÇÁÇπ„ÄÇ 
# 
#  Á§∫‰æãÔºö 
# ÁªôÂÆö‰∫åÂèâÊ†ë [3,9,20,null,null,15,7]Ôºå 
# 
#      3
#    / \
#   9  20
#     /  \
#    15   7 
# 
#  ËøîÂõûÂÆÉÁöÑÊúÄÂ§ßÊ∑±Â∫¶ 3 „ÄÇ 
#  Related Topics Ê†ë Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ ÈÄíÂΩí 
#  üëç 761 üëé 0


# leetcode submit region begin(Prohibit modification and deletion)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    # def helper(self, cur, depth):
    #     if cur == None:
    #         if depth > self.max_depth:
    #             self.max_depth = depth
    #         return 0
    #     depth += 1
    #     self.helper(cur.left, depth)
    #     self.helper(cur.right, depth)

    def maxDepth(self, root: TreeNode) -> int:
        """Ëß£Ê≥ï‰∏Ä: DFSÔºàÊØèÂà∞Êú´Â∞æËäÇÁÇπÊõ¥Êñ∞maxdepth if depth > maxdepthÔºâ"""
        # self.max_depth = 0
        # self.helper(root, 0)
        # return self.max_depth

        """Ëß£Ê≥ï‰∫å: BFSÔºàÊØèÂ±Ç maxdepth += 1Ôºâ"""
        if root is None: return 0
        q = [root]
        maxdepth = 0

        while len(q) != 0:
            maxdepth += 1
            cur = []

            while len(q) != 0:
                tmp = q.pop()
                if tmp.right: cur.append(tmp.right)
                if tmp.left: cur.append(tmp.left)

            q = cur
        return maxdepth
# leetcode submit region end(Prohibit modification and deletion)
